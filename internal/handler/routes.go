// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	comment "github.com/FlickaFrame/FlickaFrame-Server/internal/handler/comment"
	favorite "github.com/FlickaFrame/FlickaFrame-Server/internal/handler/favorite"
	follow "github.com/FlickaFrame/FlickaFrame-Server/internal/handler/follow"
	user "github.com/FlickaFrame/FlickaFrame-Server/internal/handler/user"
	video "github.com/FlickaFrame/FlickaFrame-Server/internal/handler/video"
	"github.com/FlickaFrame/FlickaFrame-Server/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/detail",
				Handler: user.DetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/avatar",
				Handler: user.UpdateAvatarHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/ranking",
				Handler: user.RankingHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/video/uptoken",
				Handler: video.CreateUpTokenHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/video/create",
				Handler: video.CreateVideoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/video/delete",
				Handler: video.DeleteVideoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/video/following",
				Handler: video.FollowingHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/video/feed",
				Handler: video.FeedHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/video/category",
				Handler: video.CategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/video/search",
				Handler: video.SearchHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPut,
				Path:    "/user/following/:user_id",
				Handler: follow.FollowHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/user/following/:user_id",
				Handler: follow.UnfollowHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/following/:user_id",
				Handler: follow.CheckMyFollowingHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/followers",
				Handler: follow.ListMyFollowersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/following",
				Handler: follow.ListMyFollowingHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/users/:user_id/followers",
				Handler: follow.ListFollowersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/users/:user_id/following",
				Handler: follow.ListFollowingHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/users/:doer_id/following/:context_user_id",
				Handler: follow.CheckFollowingHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/users/follow/:user_id/count",
				Handler: follow.CountFollowersHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/video/:video_id/comments/:comment_id",
				Handler: comment.GetVideoCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/video/:video_id/comments",
				Handler: comment.ListVideoCommentsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPut,
				Path:    "/video/:video_id/comments",
				Handler: comment.CreateVideoCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/comments/:comment_id",
				Handler: comment.DeleteVideoCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/comments/:comment_id",
				Handler: comment.EditVideoCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/video/:video_id/reply",
				Handler: comment.CreateReplyCommentHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/favorite/video/:videoId",
				Handler: favorite.FavoriteVideoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/favorite/video/:videoId/status",
				Handler: favorite.CheckVideoFavoriteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/favorite/videos",
				Handler: favorite.ListVideoFavoriteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/favorite/comment/:commentId",
				Handler: favorite.FavoriteCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/favorite/comment/:commentId/status",
				Handler: favorite.CheckCommentFavoriteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/favorite/comments",
				Handler: favorite.ListCommentFavoriteHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
