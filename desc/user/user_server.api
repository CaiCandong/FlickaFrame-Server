syntax = "v1"

info(
	title: "用户中心服务"
	desc: "用户中心服务"
	version: "v1"
)

//need login
@server(
	prefix: api/v1
	group: user
	jwt: JwtAuth
)
service main {
	@doc "Follow a user"
	@handler Follow
	put /user/follow_action/:user_id (FollowReq) returns (FollowResp)

	@doc "Unfollow a user"
	@handler Unfollow
	delete /user/follow_action/:user_id (UnFollowReq) returns (UnFollowResp)

	@doc "ListMyFollowers list the followers user of the authenticated user"
	@handler ListMyFollowers
	get /user/me/followers (ListMyFollowersReq) returns (ListMyFollowersResp)

	@doc "ListMyFollowing list the following users of the authenticated user"
	@handler ListMyFollowing
	get /user/me/following(ListMyFollowingReq) returns (ListMyFollowingResp)
}

//need login
@server(
	prefix: api/v1
	group: user
)
service main {
	@doc "ListFollowers list the given user's followers"
	@handler ListFollowers
	get /users/:user_id/followers(ListFollowersReq) returns (ListFollowersResp)

	@doc "ListFollowing list the users that the given user is following"
	@handler ListFollowing
	get /users/:user_id/following(ListFollowingReq) returns (ListFollowingResp)
}

// Need login
@server(
	prefix: api/v1
	group: user
	jwt: JwtAuth
)
service main{
	@doc "Get Current Logined User Detail Info"
	@handler CurrentUserInfo
	get /user/detail  returns (UserDetailInfoResp)

	@doc "Update User Avatar"
	@handler UpdateAvatar
	post  /user/avatar (UpdateAvatarReq) returns (UpdateAvatarResp)

	@doc "Update User Info"
	@handler UpdateInfo
	post /user/info (UpdateInfoReq) returns (UpdateInfoResp)

	@doc "Update User Password" // 修改用户密码
	@handler UpdatePassword
	post /user/updatepwd (UpdatePasswordReq) returns (UpdatePasswordResp)
}

//no need login
@server(
	prefix: api/v1
	group: user
)
service main {
	@doc "Register User"
	@handler register
	post /user/register (RegisterReq) returns (RegisterResp)

	@doc "Login User"
	@handler login
	post /user/login (LoginReq) returns (LoginResp)

	@doc "Get User Detail Info"
	@handler GetUserDetailInfo
	get /user/detail/:userId (UserDetailInfoReq) returns (UserDetailInfoResp)

	@doc "List User Ranking"
	@handler Ranking
	get /user/ranking (RankingReq) returns (RankingResp)
}

type (
	UserBasicInfo {
		ID        uint   `json:"userId"`    // 用户ID
		NickName  string `json:"nickName"`  // 用户名
		AvatarUrl string `json:"avatarUrl"` // 头像
		Slogan    string `json:"slogan"`    // 个性签名
		Gender    int64  `json:"gender"`    // 性别
	}
	UserStatisticalInfo { //用户统计信息
		FollowingCount int `json:"followingCount"` // 关注数
		FollowerCount  int `json:"followerCount"`  // 粉丝数
		LikeCount      int `json:"likeCount"`      // 获赞数量

		PublishedVideoCount   int `json:"publishVideoCount"`     // 发布作品数量
		LikeVideoCount        int `json:"likeVideoCount"`        // 点赞作品数量
		CollectionsVideoCount int `json:"collectionsVideoCount"` // 收藏作品数量
	}
	UserInteractionInfo {
		IsFollow bool `json:"isFollow"` // 是否关注
	}
	ListUserOption {
		PageSize int  `form:"pageSize,default=10"`   // 分页大小,默认为 10
		Page     int  `form:"page,default=1"`        // 当前页码,默认为 1
		ListAll  bool `form:"listAll,default=false"` // 是否列出所有,默认为 false
	}
)

type (
	RegisterReq {
		Phone    string `json:"phone" validate:"required"`
		Password string `json:"password" validate:"required"`
		NickName string `json:"nickName,option"`
	}
	RegisterResp {
		AccessToken  string `json:"accessToken"`
		AccessExpire int64  `json:"accessExpire"`
		RefreshAfter int64  `json:"refreshAfter"`
	}
)

type (
	LoginReq {
		Phone    string `json:"phone"`
		Password string `json:"password"`
	}
	LoginResp {
		AccessToken  string `json:"accessToken"`
		AccessExpire int64  `json:"accessExpire"`
		RefreshAfter int64  `json:"refreshAfter"`
	}
)

type (
	CurrentUserInfoReq {
	}
	CurrentUserInfoResp {
		UserBasicInfo
		UserStatisticalInfo
		UserInteractionInfo
	}
	UserDetailInfoReq {
		ContextUserId uint `path:"userId"`
	}
	UserDetailInfoResp {
		UserBasicInfo
		UserStatisticalInfo
		UserInteractionInfo
	}
)

type (
	UpdateAvatarReq {
		// image must be base64 encoded
		Image string `json:"image" binding:"Required"`
	}
	UpdateAvatarResp {
	}
)

type (
	RankingReq {
		ListUserOption
	}
	RankingResp {
		Users []*UserBasicInfo `json:"users"`
	}
)

type (
	UpdateInfoReq  struct{}
	UpdateInfoResp struct{}
)

type (
	UpdatePasswordReq  struct{}
	UpdatePasswordResp struct{}
)

type (
	FollowReq {
		ContextUserId uint `path:"user_id"`
	}
	FollowResp {
	}
	UnFollowReq {
		ContextUserId uint `json:"userId" path:"user_id" desc:"关注用户id" validate:"required"`
	}
	UnFollowResp {
	}
)

type (
	FollowUser {
		UserBasicInfo
		UserInteractionInfo
	}
	ListMyFollowersReq {
		ListUserOption
	}
	ListMyFollowersResp {
		FollowUser []*FollowUser `json:"users" desc:"用户id"`
	}
	ListFollowingReq {
		ContextUserId uint `path:"user_id"`
		ListUserOption
	}
	ListFollowingResp {
		FollowUser []*FollowUser `json:"users" desc:"用户id"`
	}
	ListMyFollowingReq {
		ListUserOption
	}

	ListMyFollowingResp {
		FollowUser []*FollowUser `json:"users" desc:"用户id"`
	}
	ListFollowersReq {
		ContextUserId uint `path:"user_id"`
		ListUserOption
	}
	ListFollowersResp {
		FollowUser []*FollowUser `json:"users" desc:"用户id"`
	}
)